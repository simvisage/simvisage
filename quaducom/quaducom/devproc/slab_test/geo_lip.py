'''
Created on Jun 16, 2010

@author: alexander
'''
from etsproxy.traits.api import \
    HasTraits, Float, Array, implements, Property, cached_property, Instance, Enum, \
    Dict, Bool, Int, List

import numpy as np

import scipy as sp

from os.path import join

from math import pi


class GeoLIP(HasTraits):
    '''Geometry definition of the round load introduction plate (LIP) 
    corresponding to steel plate in the test setup.
    '''

    #-----------------------------------------------------------------
    # geometric parameters of the slab
    #-----------------------------------------------------------------
    # NOTE: coordinate system is placed in the center of the load introduction plate

    # specify offset (translation) of the elastomer patch
    # in global coordinates
    #
    xyoffset = Float(0.0, input = True)
    zoffset = Float(0.0, input = True)
    
    #-----------------
    # geometry:
    #-----------------

    # Radius of load introduction plate 
    #
    radius_plate = Float(0.10, input = True)
    
    # z-direction
    #
    thickness_plate = Float(0.006, input = True)

    def __call__(self, pts):
        print('*** geo_load_introduction_plate called ***') 
        
        x_, y_, z_ = pts.T
                
        R = self.radius_plate
        tp = self.thickness_plate
        
        #-------------------------------------------
        # transformation to global coordinates 
        #-------------------------------------------

        # 3. quadrant (mesh in load introduction area)
        #
        xR = R * np.cos( y_ * np.pi/4. ) 
        yR = R * np.cos( x_ * np.pi/4. ) 
        x = x_ * xR 
        y = y_ * yR
        z = z_ * tp

        # rotate coordinates in order to have the center of the load introduction plate 
        # at the top left corner of the grid
        #
        xyoffset = self.xyoffset
        zoffset = self.zoffset
        pts = np.c_[R - x + xyoffset, R - y + xyoffset, z + zoffset ]
#        pts = np.c_[x + xyoffset, y + xyoffset, z + zoffset ]

        # switch order of the points in order to start in the opposite corner of the slab
        # instead of the center of the load introduction plate. The opposite center of the 
        # slab corresponds to the origin of the slab in the model 'sim_st' (as generated by
        # the FEGrid mesh
        #
        pts = pts[::-1]
        # switch back the order of the z-axis in order to maintain starting from 0
        #
        pts[:,-1] = pts[:,-1][::-1]

        return pts




if __name__ == '__main__':

    from numpy import mgrid, c_, hstack, vstack, shape
    from etsproxy.mayavi import mlab

    lip = GeoLIP()

    # discretization of the load introduction plate (region 'R')
    # i.e. number of elements in thickness direction 
    #
    shape_R = 3
        
    # discretization in z-direction 
    # (thickness direction):
    #
    shape_z = 1

    grid = mgrid[0:1:complex(0, shape_R + 1),
                 0:1:complex(0, shape_R + 1),
                 0:1:complex(0, shape_z + 1)]

    X, Y, Z = grid

    gpoints = c_[ X.flatten(), Y.flatten(), Z.flatten() ]
    
    mlab.figure(bgcolor=(1.,1.,1.,))
    fp1 = lip(gpoints)
    mlab.points3d(fp1[:, 0], fp1[:, 1], fp1[:, 2],
                   scale_factor = 0.01 ,
                   resolution = 8)
    mlab.axes()
    mlab.show()